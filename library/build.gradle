// Gradle script to build the "library" subproject of j-ogg-all

plugins {
    id 'checkstyle'    // to analyze Java sourcecode for style violations
    id 'java-library'  // to build JVM libraries
    id 'maven-publish' // to publish artifacts to Maven repositories
    id 'signing'       // to sign artifacts for publication
}

ext {
    artifact = 'j-ogg-all'
    baseName = "${artifact}-${rootProject.ext.version}" // for artifacts
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_7
    targetCompatibility = JavaVersion.VERSION_1_8
}

// Incorporate all the classes and resources of the j-ogg-vorbis library:
sourceSets.main {
    java.srcDir '../vorbis/src/main/java'
    resources.srcDir '../vorbis/src/main/resources'
}

dependencies {
    implementation(libs.jmf)
}

checkstyle {
    toolVersion libs.versions.checkstyle.get()
}

tasks.withType(JavaCompile).configureEach { // Java compile-time options:
    options.compilerArgs << '-Xdiags:verbose'
    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_14)) {
        // Suppress warnings that source value 7 is obsolete.
        options.compilerArgs << '-Xlint:-options'
    }
    //options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true // to provide detailed deprecation warnings
    options.encoding = 'UTF-8'
    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_1_10)) {
        options.release = 8
    }
}

javadoc {
    // Disable doclint for JDK8+.
    if (JavaVersion.current().isJava8Compatible()) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

// Register publishing tasks:

tasks.register('install') {
    dependsOn 'publishMavenPublicationToMavenLocal'
    description 'Installs Maven artifacts to the local repository.'
}
tasks.register('release') {
    dependsOn 'publishMavenPublicationToOSSRHRepository'
    description 'Stages Maven artifacts to Sonatype OSSRH.'
}

// Register custom tasks for creating source/javadoc JARs:

tasks.register('javadocJar', Jar) {
    archiveClassifier = 'javadoc'
    dependsOn 'javadoc'
    description 'Creates a JAR of javadoc.'
    from javadoc.destinationDir
}

tasks.register('sourcesJar', Jar) {
    archiveClassifier = 'sources'
    description 'Creates a JAR of Java sourcecode.'
    from sourceSets.main.allJava // default is ".allSource", which includes resources
}

jar {
    archiveBaseName = project.ext.baseName
    doLast {
        println "using Java ${JavaVersion.current()} (${System.getProperty("java.vendor")})"
    }
    manifest {
        attributes 'Created-By': "${JavaVersion.current()} (${System.getProperty("java.vendor")})"
    }
}
javadocJar { archiveBaseName = project.ext.baseName }
sourcesJar { archiveBaseName = project.ext.baseName }

assemble.dependsOn('module', 'moduleAsc', 'pom', 'pomAsc')
tasks.register('module', Copy) {
    dependsOn 'generateMetadataFileForMavenPublication'
    description 'Copies the module metadata to build/libs.'
    from "${buildDir}/publications/maven/module.json"
    into "${buildDir}/libs"
    rename 'module.json', project.ext.baseName + '.module'
}
tasks.register('moduleAsc', Copy) {
    dependsOn 'signMavenPublication'
    description 'Copies the signature of the module metadata to build/libs.'
    from "${buildDir}/publications/maven/module.json.asc"
    into "${buildDir}/libs"
    rename 'module.json.asc', project.ext.baseName + '.module.asc'
}
tasks.register('pom', Copy) {
    dependsOn 'generatePomFileForMavenPublication'
    description 'Copies the Maven POM to build/libs.'
    from "${buildDir}/publications/maven/pom-default.xml"
    into "${buildDir}/libs"
    rename 'pom-default.xml', project.ext.baseName + '.pom'
}
tasks.register('pomAsc', Copy) {
    dependsOn 'signMavenPublication'
    description 'Copies the signature of the Maven POM to build/libs.'
    from "${buildDir}/publications/maven/pom-default.xml.asc"
    into "${buildDir}/libs"
    rename 'pom-default.xml.asc', project.ext.baseName + '.pom.asc'
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact javadocJar
            artifact sourcesJar
            artifactId artifact
            from components.java
            groupId rootProject.ext.group
            pom {
                description = 'J-Ogg is a collection of Java libraries for reading Ogg files and decoding different contained formats.'
                developers {
                    developer {
                        name = 'Tor-Einar Jarnbjo'
                    }
                }
                inceptionYear = '2002'
                licenses {
                    license {
                        distribution = 'repo'
                        name = 'Free and commercial use, modification and redistribution with attribution.'
                        url = rootProject.ext.websiteUrl + '/blob/master/LICENSE'
                    }
                }
                name = rootProject.ext.group + ':' + artifact
                scm {
                    connection = 'scm:git:git://github.com/stephengold/j-ogg-all.git'
                    developerConnection = 'scm:git:ssh://github.com:stephengold/j-ogg-all.git'
                    url = rootProject.ext.websiteUrl + '/tree/master'
                }
                url = rootProject.ext.websiteUrl
            }
            version rootProject.ext.version
        }
    }
    // Staging to OSSRH relies on the existence of 2 properties
    // (ossrhUsername and ossrhPassword)
    // which should be stored in ~/.gradle/gradle.properties
    repositories {
        maven {
            credentials {
                username = project.hasProperty('ossrhUsername') ? ossrhUsername : 'Unknown user'
                password = project.hasProperty('ossrhPassword') ? ossrhPassword : 'Unknown password'
            }
            name = 'OSSRH'
            url = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2'
        }
    }
}
generateMetadataFileForMavenPublication.dependsOn('pom')
publishMavenPublicationToMavenLocal.dependsOn('assemble')
publishMavenPublicationToMavenLocal.doLast {
    println 'installed locally as ' + project.ext.baseName
}
publishMavenPublicationToOSSRHRepository.dependsOn('assemble')

// Register signing tasks:

// Signing relies on the existence of 3 properties
// (signing.keyId, signing.password, and signing.secretKeyRingFile)
// which should be stored in ~/.gradle/gradle.properties

signing {
    sign publishing.publications.maven
}
tasks.withType(Sign) {
    onlyIf { rootProject.hasProperty('signing.keyId') }
}
signMavenPublication.dependsOn('module')
